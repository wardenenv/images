#!/bin/bash
set -e

echo "USER ID: $(id -g)"
echo "USER GROUP ID: $(id -g)"
echo "CHANGE TO USER ID: ${USER_ID}"
echo "CHANGE TO GROUP ID: ${GROUP_ID}"
echo "OSTYPE: ${OSTYPE}"

if [[ "$OSTYPE" =~ ^linux ]]; then
	userdel -f www-data && true
	groupadd -g ${GROUP_ID} www-data &&\
	useradd -l -u ${USER_ID} -g www-data www-data &&\
	usermod -a -G ${GROUP_ID} www-data &&\
	install -d -m 0755 -o www-data -g www-data /home/www-data &&\
	mkdir -p /var/www/html &&\
	chown --changes --silent --no-dereference --recursive \
				--from=33:33 ${USER_ID}:${GROUP_ID} \
			/home/www-data \
			/var/www \
			/var/www/html &&\
	chmod 0755 ~www-data &&\
	echo "www-data ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/nopasswd
fi

# configure php additions.ini
cat /usr/local/etc/php/conf.d/05-additions.ini.template \
  | envsubst '${MAILHOG_HOST} ${MAILHOG_PORT}' \
  | sudo tee /usr/local/etc/php/conf.d/05-additions.ini

# append roll issued root ca cert to ca-bundle trusted by curl/openssl
if [ -f /etc/ssl/roll-rootca-cert/ca.cert.pem ]; then
  sudo cp /etc/ssl/roll-rootca-cert/ca.cert.pem /usr/local/share/ca-certificates/roll-rootca-cert.pem.crt
fi

# update trust outside if condition above to allow mounting PEM files into /etc/pki/ca-trust/source/anchors
sudo update-ca-certificates 2>/dev/null

# start socat process in background to connect sockets used for agent access within container environment
if [ -S /run/host-services/ssh-auth.sock ] \
  && [ "${SSH_AUTH_SOCK}" != "/run/host-services/ssh-auth.sock" ]
then
  sudo rm -f "${SSH_AUTH_SOCK}"
  sudo bash -c "nohup socat UNIX-CLIENT:/run/host-services/ssh-auth.sock \
    UNIX-LISTEN:${SSH_AUTH_SOCK},fork,user=www-data,group=www-data 1>/var/log/socat-ssh-auth.log 2>&1 &"
fi

# start crond as a background process
sudo service cron start

# Configure composer2 as default when specified
if [[ "${COMPOSER_VERSION:=2}" == "2.2" ]]; then
  sudo cp /usr/bin/composer2lts /usr/bin/composer
elif [[ "${COMPOSER_VERSION}" == "2" ]]; then
  sudo cp /usr/bin/composer2 /usr/bin/composer
else
  sudo cp /usr/bin/composer1 /usr/bin/composer
fi

# Resolve permission issues with directories auto-created by volume mounts; to use set CHOWN_DIR_LIST to
# a list of directories (relative to working directory) to chown, walking up the paths to also chown each
# specified parent directory. Example: "dir1/dir2 dir3" will chown dir1/dir2, then dir1 followed by dir3
for DIR in ${CHOWN_DIR_LIST:-}; do
  if [ -d "${DIR}" ]; then
    while :; do
      sudo chown www-data:www-data "${DIR}"
      DIR=$(dirname "${DIR}")
      if [ ${DIR} = "." ] || [ ${DIR} = "/" ] || [ ${DIR} = "/home" ]; then
        break;
      fi
    done
  fi
done

# Resolve permission issue with /var/www/html being owned by root as a result of volume mounted on php-fpm
# and nginx combined with nginx running as a different uid/gid than php-fpm does. This condition, when it
# surfaces would cause mutagen sync failures (on initial startup) on macOS environments.
sudo chown www-data:www-data /var/www/html

# first arg is `-f` or `--some-option`
if [ "${1#-}" != "$1" ]; then
  set -- php-fpm "$@"
fi

exec "$@"
